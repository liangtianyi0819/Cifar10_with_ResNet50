# -*- coding: utf-8 -*-
"""CS767Assignment9_Question3&4ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y6luISYChICj-N7BOfw-KfjoF9r9kSUe
"""

import os
import numpy as np
import tensorflow as tf

from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.preprocessing import image
from tensorflow.keras.models import Model, load_model

(x_train_full, y_train_full), (x_test, y_test) = cifar10.load_data()
x_train, x_valid = x_train_full[:-5000] / 255, x_train_full[-5000:] / 255
y_train, y_valid = y_train_full[:-5000], y_train_full[-5000:]
print("X_train shape: " + str(x_train.shape) +
      "\nY_train shape: " + str(y_train.shape) +
      "\nX_test shape: " + str(x_test.shape) +
      "\nY_test shape: " + str(y_test.shape) +
      "\nX_valid shape: " + str(x_valid.shape) +
      "\nY_valid shape: " + str(y_valid.shape))


def set_seed():
    InitSeed = 767
    tf.random.set_seed(InitSeed)
    np.random.seed(InitSeed)


def classifier_(input_):
    initializer = tf.keras.initializers.GlorotNormal(seed=767)
    output_ = keras.layers.GlobalAveragePooling2D()(input_)
    output_ = keras.layers.Flatten()(output_)
    output_ = keras.layers.BatchNormalization()(output_)
    output_prime = output_

    output_ = keras.layers.Dense(2048, kernel_initializer=initializer)(output_)
    output_ = keras.layers.BatchNormalization()(output_)
    output_ = keras.layers.Activation('relu')(output_)
    output_ = keras.layers.Dropout(0.3)(output_)

    output_ = keras.layers.Dense(2048, kernel_initializer=initializer)(output_)
    output_ = keras.layers.BatchNormalization()(output_)
    output_ = keras.layers.Activation('relu')(output_)
    output_ = keras.layers.Dropout(0.3)(output_)

    output_ = keras.layers.Dense(1024, kernel_initializer=initializer)(output_)
    output_ = keras.layers.BatchNormalization()(output_)
    output_ = keras.layers.Activation('relu')(output_)
    output_ = keras.layers.Dropout(0.3)(output_)

    output_ = keras.layers.Concatenate()([output_, output_prime])

    output_ = keras.layers.Dense(512, activation='relu', kernel_initializer=initializer)(output_)
    output_ = keras.layers.Dense(10, activation='softmax')((output_))
    return output_


def model_flow(input_):
    output_ = keras.layers.UpSampling2D(size=(7, 7))(input_)
    output_ = tf.keras.applications.resnet.ResNet50(input_shape=(224, 224, 3),
                                                    include_top=False,
                                                    weights='imagenet')(output_)

    # output_ a fc1000 classification at this point
    # Add the self-designed classifier to produce 10-classes result
    output_ = classifier_(output_)
    return output_


def input_output_compile():
    # Shape of cifar10
    input_ = keras.layers.Input(shape=(32, 32, 3))
    output_ = model_flow(input_)
    clf = keras.Model(inputs=input_, outputs=output_)

    clf.compile(optimizer='SGD', loss='sparse_categorical_crossentropy',
                metrics=['accuracy'])
    return clf


set_seed()
model = input_output_compile()
model.summary()

set_seed()
hist = model.fit(x_train, y_train, validation_data=(x_valid, y_valid), epochs=15, batch_size=64)

# Plot the model
# from tensorflow.keras.utils import plot_model
# plot_model(model, expand_nested=False, show_shapes=True, show_layer_activations=True, show_layer_names=False)
